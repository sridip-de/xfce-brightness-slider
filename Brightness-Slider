#!/usr/bin/env python3
import gi, subprocess, shutil, time, os, json
gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
gi.require_version("Gdk", "3.0")
from gi.repository import Gtk, AppIndicator3, GLib, Gdk

class RedshiftTray:
    def __init__(self):
        # Config file for persistence
        self.config_file = os.path.expanduser("~/.config/redshift-tray.json")
        
        # Load saved settings or use defaults
        self.load_settings()
        
        self.update_timer = None
        self.is_window_created = False
        self.use_status_icon = False
        
        # Ensure redshift exists
        if not shutil.which("redshift"):
            print("Error: redshift not found. Please install it.")
            exit(1)
        
        # Kill any existing redshift processes
        self._kill_redshift()
        
        # Setup system tray with scroll support
        self.setup_tray_icon()
        
        # Apply saved settings
        self.apply_settings()
    
    def load_settings(self):
        """Load settings from config file"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                self.current_temp = config.get('temperature', 4500)
                self.current_brightness = config.get('brightness', 1.0)
            else:
                self.current_temp = 4500
                self.current_brightness = 1.0
        except:
            self.current_temp = 4500
            self.current_brightness = 1.0
    
    def save_settings(self):
        """Save settings to config file"""
        try:
            os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
            config = {
                'temperature': self.current_temp,
                'brightness': self.current_brightness
            }
            with open(self.config_file, 'w') as f:
                json.dump(config, f)
        except Exception as e:
            print(f"Failed to save settings: {e}")
    
    def setup_tray_icon(self):
        """Setup system tray with scroll support"""
        try:
            # Try StatusIcon first for scroll support
            self.status_icon = Gtk.StatusIcon.new_from_icon_name("display-brightness")
            self.status_icon.set_tooltip_text(f"Redshift Control - Brightness: {self.current_brightness:.2f}\nScroll to adjust")
            self.status_icon.connect("scroll-event", self.on_scroll_event)
            self.status_icon.connect("activate", self.show_window)
            self.status_icon.connect("popup-menu", self.on_popup_menu)
            self.use_status_icon = True
            print("Using StatusIcon with scroll support")
            
        except Exception:
            # Fallback to AppIndicator3 without scroll
            self.ind = AppIndicator3.Indicator.new(
                "redshift-tray",
                "display-brightness",
                AppIndicator3.IndicatorCategory.APPLICATION_STATUS
            )
            self.ind.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
            self.create_app_indicator_menu()
            self.use_status_icon = False
            print("Using AppIndicator3 (no scroll support)")
    
    def create_app_indicator_menu(self):
        """Create minimal menu for AppIndicator3"""
        menu = Gtk.Menu()
        
        # Status label
        status_item = Gtk.MenuItem()
        status_item.set_label(f"Brightness: {self.current_brightness:.2f}")
        status_item.set_sensitive(False)
        menu.append(status_item)
        self.status_label = status_item
        
        # Separator
        menu.append(Gtk.SeparatorMenuItem())
        
        # Controls button
        controls_item = Gtk.MenuItem(label="Controls")
        controls_item.connect("activate", self.show_window)
        menu.append(controls_item)
        
        # Quit button
        quit_item = Gtk.MenuItem(label="Quit")
        quit_item.connect("activate", self.on_quit)
        menu.append(quit_item)
        
        menu.show_all()
        self.ind.set_menu(menu)
    
    def create_status_icon_menu(self):
        """Create minimal menu for StatusIcon"""
        menu = Gtk.Menu()
        
        # Status label
        status_item = Gtk.MenuItem()
        status_item.set_label(f"Brightness: {self.current_brightness:.2f}")
        status_item.set_sensitive(False)
        menu.append(status_item)
        
        # Separator
        menu.append(Gtk.SeparatorMenuItem())
        
        # Controls button
        controls_item = Gtk.MenuItem(label="Controls")
        controls_item.connect("activate", self.show_window)
        menu.append(controls_item)
        
        # Quit button
        quit_item = Gtk.MenuItem(label="Quit")
        quit_item.connect("activate", self.on_quit)
        menu.append(quit_item)
        
        menu.show_all()
        return menu
    
    def on_popup_menu(self, icon, button, time):
        """Handle right-click on StatusIcon"""
        menu = self.create_status_icon_menu()
        menu.popup(None, None, Gtk.StatusIcon.position_menu, icon, button, time)
    
    def on_scroll_event(self, icon, event):
        """Handle mouse wheel scroll over tray icon"""
        try:
            direction = event.direction
            brightness_step = 0.05
            
            if direction == Gdk.ScrollDirection.UP:
                new_brightness = min(1.0, self.current_brightness + brightness_step)
            elif direction == Gdk.ScrollDirection.DOWN:
                new_brightness = max(0.1, self.current_brightness - brightness_step)
            else:
                return False
            
            if abs(new_brightness - self.current_brightness) > 0.01:
                self.current_brightness = round(new_brightness, 2)
                self.update_all_ui()
                self.save_settings()
                self._schedule_update()
            
            return True
        except Exception as e:
            print(f"Scroll event error: {e}")
            return False
    
    def update_all_ui(self):
        """Update all UI elements efficiently"""
        # Update tooltip for StatusIcon
        if self.use_status_icon:
            tooltip = f"Redshift Control - Brightness: {self.current_brightness:.2f}\nScroll to adjust"
            self.status_icon.set_tooltip_text(tooltip)
        else:
            # Update AppIndicator status label
            if hasattr(self, 'status_label'):
                self.status_label.set_label(f"Brightness: {self.current_brightness:.2f}")
        
        # Update main window if open
        if self.is_window_created:
            self.bright_scale.handler_block_by_func(self.on_bright_changed)
            self.bright_scale.set_value(self.current_brightness)
            self.bright_scale.handler_unblock_by_func(self.on_bright_changed)
            self.bright_label.set_markup(f"<b>Brightness: {self.current_brightness:.2f}</b>")
    
    def _kill_redshift(self):
        """Kill redshift processes efficiently"""
        try:
            subprocess.run(["pkill", "-f", "redshift"], 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=1)
        except:
            pass
    
    def _create_window(self):
        """Create main control window"""
        if self.is_window_created:
            return
        
        self.win = Gtk.Window(title="Redshift Control Panel")
        self.win.set_default_size(320, 200)
        self.win.set_resizable(False)
        self.win.set_skip_taskbar_hint(True)
        self.win.set_position(Gtk.WindowPosition.CENTER)
        
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10, margin=15)
        self.win.add(vbox)
        
        # Title
        title_label = Gtk.Label()
        title_label.set_markup("<b>Redshift Control Panel</b>")
        vbox.pack_start(title_label, False, False, 0)
        
        # Temperature controls
        self.temp_label = Gtk.Label()
        self.temp_label.set_halign(Gtk.Align.START)
        self.temp_label.set_markup(f"<b>Temperature: {self.current_temp}K</b>")
        
        temp_adj = Gtk.Adjustment(value=self.current_temp, lower=1000, upper=10000,
                                  step_increment=100, page_increment=500)
        self.temp_scale = Gtk.Scale(orientation=Gtk.Orientation.HORIZONTAL, adjustment=temp_adj)
        self.temp_scale.set_digits(0)
        self.temp_scale.set_draw_value(False)
        self.temp_scale.connect("value-changed", self.on_temp_changed)
        
        vbox.pack_start(self.temp_label, False, False, 0)
        vbox.pack_start(self.temp_scale, False, False, 0)
        
        # Brightness controls
        self.bright_label = Gtk.Label()
        self.bright_label.set_halign(Gtk.Align.START)
        self.bright_label.set_markup(f"<b>Brightness: {self.current_brightness:.2f}</b>")
        
        bright_adj = Gtk.Adjustment(value=self.current_brightness, lower=0.1, upper=1.0,
                                    step_increment=0.05, page_increment=0.1)
        self.bright_scale = Gtk.Scale(orientation=Gtk.Orientation.HORIZONTAL, adjustment=bright_adj)
        self.bright_scale.set_digits(2)
        self.bright_scale.set_draw_value(False)
        self.bright_scale.connect("value-changed", self.on_bright_changed)
        
        vbox.pack_start(self.bright_label, False, False, 0)
        vbox.pack_start(self.bright_scale, False, False, 0)
        
        # Preset buttons
        preset_label = Gtk.Label()
        preset_label.set_markup("<b>Quick Presets:</b>")
        preset_label.set_halign(Gtk.Align.START)
        vbox.pack_start(preset_label, False, False, 5)
        
        preset_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        preset_box.set_halign(Gtk.Align.CENTER)
        
        presets = [("Daylight", 6500, 1.0), ("Warm", 4500, 0.9), ("Night", 2700, 0.7)]
        for name, temp, brightness in presets:
            btn = Gtk.Button(label=name)
            btn.connect("clicked", lambda w, t=temp, b=brightness: self.apply_preset(t, b))
            preset_box.pack_start(btn, True, True, 0)
        
        vbox.pack_start(preset_box, False, False, 0)
        
        # Control buttons
        button_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        button_box.set_halign(Gtk.Align.CENTER)
        
        reset_btn = Gtk.Button(label="Reset")
        reset_btn.connect("clicked", self.reset_settings)
        button_box.pack_start(reset_btn, False, False, 0)
        
        close_btn = Gtk.Button(label="Close")
        close_btn.connect("clicked", self.on_hide)
        button_box.pack_start(close_btn, False, False, 0)
        
        quit_btn = Gtk.Button(label="Quit")
        quit_btn.connect("clicked", self.on_quit)
        button_box.pack_start(quit_btn, False, False, 0)
        
        vbox.pack_start(button_box, False, False, 5)
        
        # Window events
        self.win.connect("delete-event", self.on_hide)
        self.is_window_created = True
    
    def show_window(self, *args):
        if not self.is_window_created:
            self._create_window()
        self.win.show_all()
        self.win.present()
    
    def on_hide(self, *args):
        if self.is_window_created:
            self.win.hide()
        return True
    
    def on_quit(self, *args):
        if self.update_timer:
            GLib.source_remove(self.update_timer)
        
        self.save_settings()
        self._kill_redshift()
        Gtk.main_quit()
    
    def apply_settings(self):
        """Apply redshift settings efficiently"""
        self._kill_redshift()
        
        try:
            subprocess.Popen([
                "redshift", "-P", "-O", str(self.current_temp), 
                "-b", str(self.current_brightness)
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception as e:
            print(f"Redshift error: {e}")
    
    def _schedule_update(self):
        """Debounced updates to prevent excessive calls"""
        if self.update_timer:
            GLib.source_remove(self.update_timer)
        self.update_timer = GLib.timeout_add(100, self._delayed_apply)
    
    def _delayed_apply(self):
        """Apply settings after delay"""
        self.apply_settings()
        self.update_timer = None
        return False
    
    def on_temp_changed(self, scale):
        self.current_temp = int(scale.get_value())
        self.temp_label.set_markup(f"<b>Temperature: {self.current_temp}K</b>")
        self.save_settings()
        self._schedule_update()
    
    def on_bright_changed(self, scale):
        self.current_brightness = round(scale.get_value(), 2)
        self.bright_label.set_markup(f"<b>Brightness: {self.current_brightness:.2f}</b>")
        self.update_all_ui()
        self.save_settings()
        self._schedule_update()
    
    def apply_preset(self, temp, brightness):
        """Apply preset efficiently"""
        self.current_temp = temp
        self.current_brightness = brightness
        
        if self.is_window_created:
            # Block signals temporarily
            self.temp_scale.handler_block_by_func(self.on_temp_changed)
            self.bright_scale.handler_block_by_func(self.on_bright_changed)
            
            self.temp_scale.set_value(temp)
            self.bright_scale.set_value(brightness)
            
            self.temp_scale.handler_unblock_by_func(self.on_temp_changed)
            self.bright_scale.handler_unblock_by_func(self.on_bright_changed)
            
            self.temp_label.set_markup(f"<b>Temperature: {self.current_temp}K</b>")
            self.bright_label.set_markup(f"<b>Brightness: {self.current_brightness:.2f}</b>")
        
        self.update_all_ui()
        self.save_settings()
        self.apply_settings()
    
    def reset_settings(self, *args):
        """Reset to system defaults"""
        try:
            subprocess.run(["redshift", "-x"], timeout=2,
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            time.sleep(0.2)
        except:
            pass
        self.apply_preset(6500, 1.0)

if __name__ == "__main__":
    import gc
    gc.set_threshold(700, 10, 10)
    
    app = RedshiftTray()
    
    try:
        Gtk.main()
    except KeyboardInterrupt:
        app.on_quit()