#!/usr/bin/env python3
import gi, subprocess, shutil, time, os
gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
from gi.repository import Gtk, AppIndicator3, GLib

class RedshiftTray:
    def __init__(self):
        # Defaults
        self.current_temp = 4500
        self.current_brightness = 1.0
        self.update_timer = None
        self.is_window_created = False
        
        # Ensure redshift exists
        if not shutil.which("redshift"):
            print("Error: redshift not found. Please install it.")
            exit(1)
        
        # Kill any existing redshift processes
        self._kill_redshift()
        
        # Indicator (lightweight)
        self.ind = AppIndicator3.Indicator.new(
            "redshift-tray",
            "display-brightness",
            AppIndicator3.IndicatorCategory.APPLICATION_STATUS
        )
        self.ind.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        
        # Minimal tray menu
        menu = Gtk.Menu()
        open_item = Gtk.MenuItem(label="Controls")
        open_item.connect("activate", self.show_window)
        menu.append(open_item)
        menu.show_all()
        self.ind.set_menu(menu)
        
        # Apply initial settings and show window
        self.apply_settings()
        self.show_window()
    
    def _kill_redshift(self):
        """Efficiently kill redshift processes"""
        try:
            subprocess.run(["pkill", "-f", "redshift"], 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except:
            pass
    
    def _create_window(self):
        """Lazy window creation to save initial memory"""
        if self.is_window_created:
            return
        
        self.win = Gtk.Window(title="Redshift Control")
        self.win.set_default_size(280, 180)
        self.win.set_resizable(False)
        self.win.set_skip_taskbar_hint(True)
        self.win.set_position(Gtk.WindowPosition.CENTER)
        
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=8, margin=12)
        self.win.add(vbox)
        
        # Temperature controls
        self.temp_label = Gtk.Label()
        self.temp_label.set_halign(Gtk.Align.START)
        
        temp_adj = Gtk.Adjustment(value=self.current_temp, lower=1000, upper=10000,
                                  step_increment=100, page_increment=500)
        self.temp_scale = Gtk.Scale(orientation=Gtk.Orientation.HORIZONTAL, adjustment=temp_adj)
        self.temp_scale.set_digits(0)
        self.temp_scale.set_draw_value(False)
        self.temp_scale.connect("value-changed", self.on_temp_changed)
        
        vbox.pack_start(self.temp_label, False, False, 0)
        vbox.pack_start(self.temp_scale, False, False, 0)
        
        # Brightness controls
        self.bright_label = Gtk.Label()
        self.bright_label.set_halign(Gtk.Align.START)
        
        bright_adj = Gtk.Adjustment(value=self.current_brightness, lower=0.1, upper=1.0,
                                    step_increment=0.05, page_increment=0.1)
        self.bright_scale = Gtk.Scale(orientation=Gtk.Orientation.HORIZONTAL, adjustment=bright_adj)
        self.bright_scale.set_digits(2)
        self.bright_scale.set_draw_value(False)
        self.bright_scale.connect("value-changed", self.on_bright_changed)
        
        vbox.pack_start(self.bright_label, False, False, 0)
        vbox.pack_start(self.bright_scale, False, False, 0)
        
        # Preset buttons (compact)
        preset_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=3)
        preset_box.set_halign(Gtk.Align.CENTER)
        
        presets = [("Day", 6500, 1.0), ("Warm", 4500, 0.9), ("Night", 2700, 0.7)]
        for name, temp, brightness in presets:
            btn = Gtk.Button(label=name)
            btn.connect("clicked", lambda w, t=temp, b=brightness: self.apply_preset(t, b))
            preset_box.pack_start(btn, True, True, 0)
        
        vbox.pack_start(preset_box, False, False, 3)
        
        # Control buttons
        button_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        button_box.set_halign(Gtk.Align.CENTER)
        
        reset_btn = Gtk.Button(label="Reset")
        reset_btn.connect("clicked", self.reset_settings)
        button_box.pack_start(reset_btn, False, False, 0)
        
        quit_btn = Gtk.Button(label="Quit")
        quit_btn.connect("clicked", self.on_quit)
        button_box.pack_start(quit_btn, False, False, 0)
        
        vbox.pack_start(button_box, False, False, 0)
        
        # Window events
        self.win.connect("delete-event", self.on_hide)
        
        self.is_window_created = True
        self._update_labels()
    
    def show_window(self, *args):
        if not self.is_window_created:
            self._create_window()
        self.win.show_all()
        self.win.present()
    
    def on_hide(self, *args):
        self.win.hide()
        return True
    
    def on_quit(self, *args):
        # Clean shutdown
        if self.update_timer:
            GLib.source_remove(self.update_timer)
        
        # Reset display and cleanup
        try:
            subprocess.run(["redshift", "-x"], timeout=2,
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except:
            pass
        
        self._kill_redshift()
        Gtk.main_quit()
    
    def apply_settings(self):
        """Apply redshift settings efficiently"""
        self._kill_redshift()
        
        # Single redshift call with combined settings
        try:
            subprocess.Popen([
                "redshift", "-P", "-O", str(self.current_temp), 
                "-b", str(self.current_brightness)
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception as e:
            print(f"Redshift error: {e}")
    
    def _schedule_update(self):
        """Debounced updates to prevent excessive calls"""
        if self.update_timer:
            GLib.source_remove(self.update_timer)
        self.update_timer = GLib.timeout_add(150, self._delayed_apply)
    
    def _delayed_apply(self):
        """Apply settings after delay"""
        self.apply_settings()
        self.update_timer = None
        return False
    
    def _update_labels(self):
        """Update labels efficiently"""
        if not self.is_window_created:
            return
        self.temp_label.set_markup(f"<b>Temperature: {self.current_temp}K</b>")
        self.bright_label.set_markup(f"<b>Brightness: {self.current_brightness:.2f}</b>")
    
    def on_temp_changed(self, scale):
        self.current_temp = int(scale.get_value())
        self._update_labels()
        self._schedule_update()
    
    def on_bright_changed(self, scale):
        self.current_brightness = round(scale.get_value(), 2)
        self._update_labels()
        self._schedule_update()
    
    def apply_preset(self, temp, brightness):
        """Apply preset efficiently"""
        self.current_temp = temp
        self.current_brightness = brightness
        
        if self.is_window_created:
            # Block signals temporarily
            self.temp_scale.handler_block_by_func(self.on_temp_changed)
            self.bright_scale.handler_block_by_func(self.on_bright_changed)
            
            self.temp_scale.set_value(temp)
            self.bright_scale.set_value(brightness)
            
            self.temp_scale.handler_unblock_by_func(self.on_temp_changed)
            self.bright_scale.handler_unblock_by_func(self.on_bright_changed)
            
            self._update_labels()
        
        self.apply_settings()
    
    def reset_settings(self, *args):
        """Reset to system defaults"""
        try:
            subprocess.run(["redshift", "-x"], timeout=2,
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except:
            pass
        self.apply_preset(6500, 1.0)

if __name__ == "__main__":
    # Optimize Python for lower memory usage
    import gc
    gc.set_threshold(700, 10, 10)  # More aggressive garbage collection
    
    app = RedshiftTray()
    
    try:
        Gtk.main()
    except KeyboardInterrupt:
        app.on_quit()