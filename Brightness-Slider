#!/usr/bin/env python3
import gi, subprocess, shutil, time
gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
from gi.repository import Gtk, AppIndicator3, GLib

class RedshiftTray:
    def __init__(self):
        # Defaults
        self.current_temp = 4500
        self.current_brightness = 1.0
        self.redshift_process = None
        self.update_timer = None
        
        # Ensure redshift exists
        if not shutil.which("redshift"):
            print("Error: redshift not found. Please install it.")
            exit(1)
        
        # Kill any existing redshift processes to avoid conflicts
        try:
            subprocess.run(["pkill", "redshift"], check=False)
            time.sleep(0.1)  # Brief pause to ensure process is killed
        except:
            pass
        
        # Indicator
        self.ind = AppIndicator3.Indicator.new(
            "redshift-tray",
            "display-brightness",
            AppIndicator3.IndicatorCategory.APPLICATION_STATUS
        )
        self.ind.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        
        # Simplified tray menu
        menu = Gtk.Menu()
        open_item = Gtk.MenuItem(label="Show Controls")
        open_item.connect("activate", self.show_window)
        menu.append(open_item)
        menu.show_all()
        self.ind.set_menu(menu)
        
        # Control window
        self.win = Gtk.Window(title="Redshift Control")
        self.win.set_default_size(300, 200)
        self.win.set_resizable(False)
        self.win.set_skip_taskbar_hint(True)
        self.win.set_position(Gtk.WindowPosition.CENTER)
        
        # Main container
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10, margin=15)
        self.win.add(vbox)
        
        # Temperature controls
        temp_label = Gtk.Label()
        temp_label.set_markup(f"<b>Temperature: {self.current_temp}K</b>")
        temp_label.set_halign(Gtk.Align.START)
        self.temp_label = temp_label
        
        temp_adj = Gtk.Adjustment(value=self.current_temp, lower=1000, upper=10000,
                                  step_increment=100, page_increment=500)
        self.temp_scale = Gtk.Scale(orientation=Gtk.Orientation.HORIZONTAL, adjustment=temp_adj)
        self.temp_scale.set_digits(0)
        self.temp_scale.set_draw_value(False)
        self.temp_scale.connect("value-changed", self.on_temp_changed)
        
        vbox.pack_start(temp_label, False, False, 0)
        vbox.pack_start(self.temp_scale, False, False, 0)
        
        # Brightness controls
        bright_label = Gtk.Label()
        bright_label.set_markup(f"<b>Brightness: {self.current_brightness:.2f}</b>")
        bright_label.set_halign(Gtk.Align.START)
        self.bright_label = bright_label
        
        bright_adj = Gtk.Adjustment(value=self.current_brightness, lower=0.1, upper=1.0,
                                    step_increment=0.05, page_increment=0.1)
        self.bright_scale = Gtk.Scale(orientation=Gtk.Orientation.HORIZONTAL, adjustment=bright_adj)
        self.bright_scale.set_digits(2)
        self.bright_scale.set_draw_value(False)
        self.bright_scale.connect("value-changed", self.on_bright_changed)
        
        vbox.pack_start(bright_label, False, False, 0)
        vbox.pack_start(self.bright_scale, False, False, 0)
        
        # Preset buttons
        preset_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        preset_box.set_halign(Gtk.Align.CENTER)
        
        presets = [
            ("Daylight", 6500, 1.0),
            ("Warm", 4500, 0.9),
            ("Night", 2700, 0.7)
        ]
        
        for name, temp, brightness in presets:
            btn = Gtk.Button(label=name)
            btn.connect("clicked", lambda w, t=temp, b=brightness: self.apply_preset(t, b))
            preset_box.pack_start(btn, True, True, 0)
        
        vbox.pack_start(preset_box, False, False, 5)
        
        # Control buttons
        button_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        button_box.set_halign(Gtk.Align.CENTER)
        
        reset_btn = Gtk.Button(label="Reset")
        reset_btn.connect("clicked", self.reset_settings)
        button_box.pack_start(reset_btn, False, False, 0)
        
        quit_btn = Gtk.Button(label="Quit")
        quit_btn.connect("clicked", self.on_quit)
        button_box.pack_start(quit_btn, False, False, 0)
        
        vbox.pack_start(button_box, False, False, 5)
        
        # Window events
        self.win.connect("delete-event", self.on_hide)
        self.win.connect("destroy", self.on_quit)
        
        # Apply initial settings and show window
        self.apply_settings()
        self.show_window()
    
    def show_window(self, *args):
        self.win.show_all()
        self.win.present()
    
    def on_hide(self, *args):
        self.win.hide()
        return True  # Prevent window destruction
    
    def on_quit(self, *args):
        # Clean up: kill redshift and reset display
        if self.update_timer:
            GLib.source_remove(self.update_timer)
        try:
            subprocess.run(["redshift", "-x"], check=False)  # Reset display
            subprocess.run(["pkill", "redshift"], check=False)  # Kill any redshift processes
        except:
            pass
        Gtk.main_quit()
    
    def apply_settings(self):
        """Apply current temperature and brightness settings"""
        # Kill any existing redshift process to avoid conflicts
        try:
            subprocess.run(["pkill", "redshift"], check=False, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except:
            pass
        
        # Apply new settings
        try:
            subprocess.Popen([
                "redshift", "-P", "-O", str(self.current_temp), 
                "-b", str(self.current_brightness)
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except Exception as e:
            print(f"Error applying redshift settings: {e}")
    
    def schedule_update(self):
        """Schedule a delayed update to avoid excessive calls"""
        if self.update_timer:
            GLib.source_remove(self.update_timer)
        self.update_timer = GLib.timeout_add(200, self.delayed_apply)  # 200ms delay
    
    def delayed_apply(self):
        """Apply settings after delay"""
        self.apply_settings()
        self.update_timer = None
        return False  # Don't repeat timer
    
    def update_labels(self):
        """Update the display labels"""
        self.temp_label.set_markup(f"<b>Temperature: {self.current_temp}K</b>")
        self.bright_label.set_markup(f"<b>Brightness: {self.current_brightness:.2f}</b>")
    
    def on_temp_changed(self, scale):
        self.current_temp = int(scale.get_value())
        self.update_labels()
        self.schedule_update()
    
    def on_bright_changed(self, scale):
        self.current_brightness = round(scale.get_value(), 2)
        self.update_labels()
        self.schedule_update()
    
    def apply_preset(self, temp, brightness):
        """Apply a preset configuration"""
        self.current_temp = temp
        self.current_brightness = brightness
        
        # Update sliders without triggering their change events
        self.temp_scale.handler_block_by_func(self.on_temp_changed)
        self.bright_scale.handler_block_by_func(self.on_bright_changed)
        
        self.temp_scale.set_value(temp)
        self.bright_scale.set_value(brightness)
        
        self.temp_scale.handler_unblock_by_func(self.on_temp_changed)
        self.bright_scale.handler_unblock_by_func(self.on_bright_changed)
        
        self.update_labels()
        self.apply_settings()
    
    def reset_settings(self, *args):
        """Reset to system defaults"""
        try:
            subprocess.run(["redshift", "-x"], check=False)  # Reset display
            subprocess.run(["pkill", "redshift"], check=False)  # Kill redshift
        except:
            pass
        
        # Reset to defaults
        self.apply_preset(6500, 1.0)

if __name__ == "__main__":
    RedshiftTray()
    Gtk.main()